# Euler Problem 45:
# Triangle, pentagonal, and hexagonal numbers are generated by the following
# formulae:
#
#   Triangle         T_n=n(n+1)/2        1, 3, 6, 10, 15, ...
#   Pentagonal       P_n=n(3n-1)/2       1, 5, 12, 22, 35, ...
#   Hexagonal        H_n=n(2n-1)         1, 6, 15, 28, 45, ...
#
# It can be verified that T_285=P_165=H_143=40755.
#
# Find the next triangle number that is also pentagonal and hexagonal.

# Solution
#----------------------------------------------------------
# Instead of calculating every next integer and checking if is triangular, then
# pentagonal, then hexagonal we can merely generate each next hexagonal number,
# then check if it's also pentagonal. Note that all hexagonal numbers are also
# triangular so we do not need to run that check as we iterate through the
# hexagonal numbers, also note that this is better than checking in any other
# order for this reason as well as hexagonal numbers grow the fastest of the
# three

import time as T

def isPentagonal(num):
    if (((24.0*num+1)**.5+1)/6)%1<.00001:
        return True
    else:
        return False

def hexN(n):
    return n*(2*n-1)

def main():
    st = T.time()
    found = False
    h = 286

    while found==False:
        check = hexN(h)
        if isPentagonal(check):
            ans=check
            found=True
        else:
            h+=1
    tt=T.time()-st
    print "The second triangle number that is also pentagonal and hexagonal is:", ans
    print "This program took", tt, "seconds to run"





if __name__ == "__main__":
    import sys
    main()

